;
; Copyright (c) 2013-2014, Marc De Graef/Carnegie Mellon University
; All rights reserved.
;
; Redistribution and use in source and binary forms, with or without modification, are 
; permitted provided that the following conditions are met:
;
;     - Redistributions of source code must retain the above copyright notice, this list 
;        of conditions and the following disclaimer.
;     - Redistributions in binary form must reproduce the above copyright notice, this 
;        list of conditions and the following disclaimer in the documentation and/or 
;        other materials provided with the distribution.
;     - Neither the names of Marc De Graef, Carnegie Mellon University nor the names 
;        of its contributors may be used to endorse or promote products derived from 
;        this software without specific prior written permission.
;
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE 
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
; OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE 
; USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
; ###################################################################
;--------------------------------------------------------------------------
; CTEMsoft2013:EBSDreadHDFdatafile.pro
;--------------------------------------------------------------------------
;
; PROGRAM: EBSDreadHDFdatafile.pro
;
;> @author Marc De Graef, Carnegie Mellon University
;
;> @brief Reads the HDF data files produced by the EMMC.f90 and EMEBSDmaster.f90 programs
;
;> @date 03/19/14 MDG 1.0 first attempt 
;> @date 04/02/15 MDG 2.0 modfied from EBSDreaddatafile to cover HDF formatted files
;--------------------------------------------------------------------------
pro EBSDreadHDFdatafile,MCFILE=MCFILE,MPFILE=MPFILE
;
;------------------------------------------------------------
; common blocks
common EBSD_widget_common, EBSDwidget_s
common EBSD_data_common, EBSDdata

; the next common block contains all the raw data needed to generate the EBSD patterns
common EBSD_rawdata, accum_e, accum_z, MParray, MParraysum

  Core_Print,' ',/blank
  EBSDdata.MCMPboth = 0

if keyword_set(MPFILE) then begin
  Core_Print,'Reading data file '+EBSDdata.mpfilename

; first make sure that this is indeed an HDF file
  res = H5F_IS_HDF5(EBSDdata.pathname+'/'+EBSDdata.mpfilename)
  if (res eq 0) then begin
    Core_Print,'  This is not an HDF file ! ',/blank
    goto,skipall
  endif

; ok, so it is an HDF file; let's open it
  file_id = H5F_OPEN(EBSDdata.pathname+'/'+EBSDdata.mpfilename)
  if (file_id eq -1L) then begin
    Core_Print,'  Error opening file',/blank
    goto, skipall
  endif 

; open the EMheader group
  group_id = H5G_open(file_id,'EMheader')

;  open and read the ProgramName dataset
  dset_id = H5D_open(group_id,'ProgramName')
  z = H5D_read(dset_id) 
  progname = strtrim(z[0],2)
  H5D_close,dset_id
    Core_Print,' ->File generated by program '+progname+'<-'

; open and read the Version dataset
  dset_id = H5D_open(group_id,'Version')
  z = H5D_read(dset_id) 
  scversion = strtrim(z[0],2)
  H5D_close,dset_id
  EBSDdata.scversion = strtrim(scversion,2)
    Core_Print,'Version identifier : '+scversion 

; close the EMheader group
  H5G_close,group_id

; display the file size in Mb 
  WIDGET_CONTROL, SET_VALUE=string(float(EBSDdata.mpfilesize)/1024./1024.,FORMAT="(F8.2)")+' Mb', EBSDwidget_s.mpfilesize

; structure file name
;  xtalname = bytarr(132)
;  readu,1,xtalname
;  EBSDdata.xtalname = strtrim(string(xtalname))
;    Core_Print,'Xtalname = ->'+EBSDdata.xtalname+'<-'
;  WIDGET_CONTROL, SET_VALUE=EBSDdata.xtalname, EBSDwidget_s.xtalname

; open the NMLparameters/EBSDMasterNameList group
  group_id = H5G_open(file_id,'NMLparameters/EBSDMasterNameList')

; open and read the energyfile dataset
  dset_id = H5D_open(group_id,'energyfile')
  z = H5D_read(dset_id) 
  res = strtrim(z[0],2)
  H5D_close,dset_id
  finfo = file_info(res)
  EBSDdata.mcfilesize = finfo.size

  spos = strpos(res,'/',/reverse_search)
  dpos = strpos(res,'.',/reverse_search)
  plen = strlen(res)
  EBSDdata.mcpathname = strmid(res,0,spos)
  EBSDdata.mcfilename = strmid(res,spos+1)
    Core_Print,'MC filename = ->'+EBSDdata.mcfilename+'<-'
  WIDGET_CONTROL, SET_VALUE=EBSDdata.mcfilename, EBSDwidget_s.mcfilename

; npx, npy
  dset_id = H5D_open(group_id,'npx')
  z = H5D_read(dset_id) 
  res = long(z[0])
  H5D_close,dset_id
  EBSDdata.mpimx = res
  EBSDdata.mpimy = res
  EBSDdata.Asymsel = -1

; close the group
  H5g_close,group_id

; open the EMData group
  group_id = H5G_open(file_id,'EMData')
 
; numEbins, numset datasets
  dset_id = H5D_open(group_id,'numEbins')
  z = H5D_read(dset_id) 
  res = long(z[0])
  H5D_close,dset_id
  EBSDdata.mcenergynumbin = res

  dset_id = H5D_open(group_id,'numset')
  z = H5D_read(dset_id) 
  res = long(z[0])
  H5D_close,dset_id
  EBSDdata.numset= res

  WIDGET_CONTROL, SET_VALUE=string(2*EBSDdata.mpimx+1,format="(I5)"), EBSDwidget_s.mpimx
  WIDGET_CONTROL, SET_VALUE=string(2*EBSDdata.mpimx+1,format="(I5)"), EBSDwidget_s.mpimy
  WIDGET_CONTROL, SET_VALUE=string(EBSDdata.mcenergynumbin,format="(I5)"), EBSDwidget_s.mcenergynumbin
  
; energy levels
  dset_id = H5D_open(group_id,'EkeVs')
  EkeVs = H5D_read(dset_id) 
  res = long(z[0])
  H5D_close,dset_id

; atomic numbers for asymmetric unit
  dset_id = H5D_open(group_id,'cell%ATOM_type')
  atnum = H5D_read(dset_id) 
  res = long(z[0])
  H5D_close,dset_id
  EBSDdata.atnum(0:EBSDdata.numset-1) = atnum(0:EBSDdata.numset-1)

; Lambert projection type
  dset_id = H5D_open(group_id,'squhex')
  z = H5D_read(dset_id) 
  res = strtrim(z[0],2)
  H5D_close,dset_id
  if (res eq 'hexago') then EBSDdata.mpgridmode = ' Hexagonal' else EBSDdata.mpgridmode = ' Square'
  WIDGET_CONTROL, SET_VALUE=EBSDdata.mpgridmode, EBSDwidget_s.mpgridmode

; and finally the results array
  dset_id = H5D_open(group_id,'sr')
  MParray = H5D_read(dset_id) 
  H5D_close,dset_id
  if (EBSDdata.numset gt 1) then MParraysum = total(MParray,4) else MParraysum = MParray
 
; close the group
  H5G_close,group_id

  sz = size(MParray,/dimensions)
  if (EBSDdata.numset gt 1) then Core_Print,' Size of MParray data array : '+string(sz[0],format="(I5)")+' x'+string(sz[1],format="(I5)") +' x'+string(sz[2],format="(I5)") +' x'+string(sz[3],format="(I5)") else Core_Print,' Size of MParray data array : '+string(sz[0],format="(I5)")+' x'+string(sz[1],format="(I5)") +' x'+string(sz[2],format="(I5)")

; and close the file
  H5F_close,file_id

; and initialize the coordinate arrays for the Lambert transformation
  Core_LambertS2C,reform(MParray[*,*,0,0]),/mp
  Core_LambertS2SP,reform(MParray[*,*,0,0]),/mp

   WIDGET_CONTROL, EBSDwidget_s.MPbutton, sensitive=1
   WIDGET_CONTROL, EBSDwidget_s.detector, sensitive=1
  EBSDdata.MCMPboth = 1
endif


; read the Monte Carlo data file
if (keyword_set(MCFILE) or (EBSDdata.MCMPboth eq 1)) then begin
  Core_Print,'Reading data file '+EBSDdata.mcfilename
  EBSDdata.Esel = 0

; first make sure that this is indeed an HDF file
  res = H5F_IS_HDF5(EBSDdata.mcpathname+'/'+EBSDdata.mcfilename)
  if (res eq 0) then begin
    Core_Print,'  This is not an HDF file ! ',/blank
    goto,skipall
  endif

; ok, so it is an HDF file; let's open it
  file_id = H5F_OPEN(EBSDdata.mcpathname+'/'+EBSDdata.mcfilename)
  if (file_id eq -1L) then begin
    Core_Print,'  Error opening file',/blank
    goto, skipall
  endif 

; open the EMheader group
  group_id = H5G_open(file_id,'EMheader')

;  open and read the ProgramName dataset
  dset_id = H5D_open(group_id,'ProgramName')
  z = H5D_read(dset_id) 
  progname = strtrim(z[0],2)
  H5D_close,dset_id
    Core_Print,' ->File generated by program '+progname+'<-'

; open and read the Version dataset
  dset_id = H5D_open(group_id,'Version')
  z = H5D_read(dset_id) 
  scversion = strtrim(z[0],2)
  H5D_close,dset_id
  EBSDdata.scversion = strtrim(scversion,2)
    Core_Print,'Version identifier : '+scversion 

; close the EMheader group
  H5G_close,group_id

; display the file size in Mb 
  WIDGET_CONTROL, SET_VALUE=string(float(EBSDdata.mcfilesize)/1024./1024.,FORMAT="(F8.2)")+' Mb', EBSDwidget_s.mcfilesize

; version identifier 3_x_x is single structure file
; version identifier 3_y_y is two-layer file

 if (EBSDdata.scversion eq '3_x_x') then begin ; scversion = 3_x_x
; structure file name
  group_id = H5G_open(file_id,'NMLparameters/MCCLNameList')

; open and read the xtalname dataset
  dset_id = H5D_open(group_id,'xtalname')
  z = H5D_read(dset_id) 
  EBSDdata.xtalname = strtrim(z[0],2)
  H5D_close,dset_id
    Core_Print,'Xtalname = ->'+EBSDdata.xtalname+'<-'
  WIDGET_CONTROL, SET_VALUE=EBSDdata.xtalname, EBSDwidget_s.xtalname

; open and read the numsx dataset 
  dset_id = H5D_open(group_id,'numsx')
  EBSDdata.mcimx = (long(H5D_read(dset_id))-1L)/2L
  EBSDdata.mcimy = EBSDdata.mcimx
  H5D_close,dset_id

; open and read the totnum_el dataset
  dset_id = H5D_open(group_id,'totnum_el')
  EBSDdata.mctotale = long(H5D_read(dset_id))
  H5D_close,dset_id

; open and read the EkeV dataset
  dset_id = H5D_open(group_id,'EkeV')
  EBSDdata.mcenergymax = double(H5D_read(dset_id))
  H5D_close,dset_id
  EBSDdata.voltage = EBSDdata.mcenergymax

; open and read the Ehistmin dataset
  dset_id = H5D_open(group_id,'Ehistmin')
  EBSDdata.mcenergymin = double(H5D_read(dset_id))
  H5D_close,dset_id

; open and read the Ebinsize dataset
  dset_id = H5D_open(group_id,'Ebinsize')
  EBSDdata.mcenergybinsize = double(H5D_read(dset_id))
  H5D_close,dset_id

; open and read the depthmax dataset
  dset_id = H5D_open(group_id,'depthmax')
  EBSDdata.mcdepthmax = double(H5D_read(dset_id))
  H5D_close,dset_id

; open and read the depthstep dataset
  dset_id = H5D_open(group_id,'depthstep')
  EBSDdata.mcdepthstep = double(H5D_read(dset_id))
  H5D_close,dset_id

; open and read the sig dataset
  dset_id = H5D_open(group_id,'sig')
  EBSDdata.mcvangle = double(H5D_read(dset_id))
  H5D_close,dset_id

; open and read the omega dataset
  dset_id = H5D_open(group_id,'omega')
  EBSDdata.mchangle = double(H5D_read(dset_id))
  H5D_close,dset_id

; open and read the MCmode dataset
  dset_id = H5D_open(group_id,'MCmode')
  res = strtrim(H5D_read(dset_id))
  H5D_close,dset_id
  if (res eq 'CSDA') then EBSDdata.mcmode = 'CSDA' else EBSDdata.mcmode = 'DLOS'

  WIDGET_CONTROL, SET_VALUE=string(EBSDdata.mcimx,format="(I5)"), EBSDwidget_s.mcimx
  WIDGET_CONTROL, SET_VALUE=string(EBSDdata.mcimy,format="(I5)"), EBSDwidget_s.mcimy
  WIDGET_CONTROL, SET_VALUE=string(EBSDdata.mctotale,format="(I12)"), EBSDwidget_s.mctotale
  WIDGET_CONTROL, SET_VALUE=string(EBSDdata.mcenergymax,format="(F7.2)"), EBSDwidget_s.mcenergymax
  WIDGET_CONTROL, SET_VALUE=string(EBSDdata.mcenergymin,format="(F7.2)"), EBSDwidget_s.mcenergymin
  WIDGET_CONTROL, SET_VALUE=string(EBSDdata.mcenergybinsize,format="(F7.2)"), EBSDwidget_s.mcenergybinsize
  WIDGET_CONTROL, SET_VALUE=string(EBSDdata.mcdepthmax,format="(F7.2)"), EBSDwidget_s.mcdepthmax
  WIDGET_CONTROL, SET_VALUE=string(EBSDdata.mcdepthstep,format="(F7.2)"), EBSDwidget_s.mcdepthstep
  WIDGET_CONTROL, SET_VALUE=string(EBSDdata.voltage,format="(F7.2)"), EBSDwidget_s.voltage
  WIDGET_CONTROL, SET_VALUE=string(EBSDdata.mcvangle,format="(F7.2)"), EBSDwidget_s.mcvangle
  WIDGET_CONTROL, SET_VALUE=string(EBSDdata.mchangle,format="(F7.2)"), EBSDwidget_s.mchangle
  WIDGET_CONTROL, SET_VALUE=EBSDdata.mcmode, EBSDwidget_s.mcmode

; close the group
  H5G_close,group_id

; and open the EMData group
  group_id = H5G_open(file_id,'EMData')

; open and read the numEbins dataset
  dset_id = H5D_open(group_id,'numEbins')
  EBSDdata.mcenergynumbin= long(H5D_read(dset_id))
  H5D_close,dset_id

; open and read the numzbins dataset
  dset_id = H5D_open(group_id,'numzbins')
  EBSDdata.mcdepthnumbins = long(H5D_read(dset_id))
  H5D_close,dset_id

  WIDGET_CONTROL, SET_VALUE=string(EBSDdata.mcenergynumbin,format="(I5)"), EBSDwidget_s.mcenergynumbin
  WIDGET_CONTROL, SET_VALUE=string(EBSDdata.mcdepthnumbins,format="(I5)"), EBSDwidget_s.mcdepthnumbins
  

; and finally, we read the actual data arrays accum_e and accum_z
  dset_id = H5D_open(group_id,'accum_e')
  accum_e = long(H5D_read(dset_id))
  H5D_close,dset_id

  dset_id = H5D_open(group_id,'accum_z')
  accum_z = long(H5D_read(dset_id))
  H5D_close,dset_id

; close the group
  H5G_close,group_id

; total number of BSE electrons
  EBSDdata.mcbse = total(accum_e)
  WIDGET_CONTROL, SET_VALUE=string(EBSDdata.mcbse,format="(I12)"), EBSDwidget_s.mcbse

  sz = size(accum_e,/dimensions)
    Core_Print,' Size of accum_e data array : '+string(sz[0],format="(I5)")+' x'+string(sz[1],format="(I5)")+' x'+string(sz[2],format="(I5)")
  sz = size(accum_z,/dimensions)
    Core_Print,' Size of accum_z data array : '+string(sz[0],format="(I5)")+' x'+string(sz[1],format="(I5)") +' x'+string(sz[2],format="(I5)") +' x'+string(sz[3],format="(I5)")

; and close the file
  H5F_close,file_id

end else begin  ; scversion = 3_y_y

  Core_Print,' HDF format not implemented for this file version'

end ; scversion if then else


; and initialize the coordinate arrays for the Lambert transformation
  Core_LambertS2C,reform(accum_e[0,*,*]),/mc
  Core_LambertS2SP,reform(accum_e[0,*,*]),/mc

; (de)activate buttons
   WIDGET_CONTROL, EBSDwidget_s.MCbutton, sensitive=1
   if (EBSDdata.MCMPboth eq 0) then begin
     WIDGET_CONTROL, EBSDwidget_s.MPbutton, sensitive=0
     WIDGET_CONTROL, EBSDwidget_s.detector, sensitive=0
     WIDGET_CONTROL, SET_VALUE=' ', EBSDwidget_s.mpfilename
     WIDGET_CONTROL, SET_VALUE=' ', EBSDwidget_s.mpfilesize
     WIDGET_CONTROL, SET_VALUE=' ', EBSDwidget_s.mpimx
     WIDGET_CONTROL, SET_VALUE=' ', EBSDwidget_s.mpimy
     WIDGET_CONTROL, SET_VALUE=' ', EBSDwidget_s.mpgridmode
   endif
end


  Core_Print,'Completed reading data file(s)',/blank


skipall:

end
